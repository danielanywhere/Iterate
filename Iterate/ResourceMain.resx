<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rxCommands" xml:space="preserve">
    <value>(?&lt;r&gt;'(?&lt;v&gt;[^']*)')</value>
    <comment>Regular expression pattern for reading the list of executable commands.</comment>
  </data>
  <data name="rxVariables" xml:space="preserve">
    <value>(?&lt;r&gt;\{\s*'(?&lt;n&gt;[^']*)'\s*\:\s*'(?&lt;v&gt;[^']*)'\s*\})</value>
    <comment>Regular expression pattern for reading the variables collection from the command-line.</comment>
  </data>
  <data name="Syntax" xml:space="preserve">
    <value>Iterate over files and folders, performing one or more commands on each
matching item.

Syntax:
iterate /folder:{FolderPath} [/filemask:{FileMask}] [/recurse:{True|False}]
        [/variables:[{{Var1Name}:{Var1Value}},...,{{VarNName}:{VarNValue}}]]
        /commands:[{Command1},{Command2},...{Commandn}]
        [/log:{LogFilename}][/wait][/?]

        {FolderPath}    - Pathname of the starting folder.
        {FileMask}      - Mask to match on filenames.
        {LogFilename}   - Filename of the text log to generate.

        /log            - Create a log file containing the output of
                          the commands.
        /recurse        - Value indicating whether to recurse folders.
                          Default = true.
        /variables      - JSON array of variables to insert in commands.
        /commands       - JSON string array of individual commands to
                          run in sequence.
        /wait           - Wait for user keypress after application finishes.
        /?              - Display this help message.

Each command can contain one or more variable names, enclosed in curly
braces. For example, "move {Filename} {Dest}\{RelativeFolderName}\{Filename}"

Command and variable quote formatting.
The commands and variables arguments support multi-level quoting.
If either of the commands or variables arguments contains spaces, the
 double-quote character is used to surround the entire argument and its
 parameters. This format will be required in most cases.
Single apostrophes are used to surround each command, variable name, and
 variable value.
The caret is used to represent double quotes within individual values.

Quoting Examples:
 "/variables:[{'Name':'MyName'},{'OtherName':'Other Value'}]"
 "/commands:['xcopy ^{FromFilename}^ ^{ToFilename}^', 'echo OK']"

Built-in variables:
The following variable names are built in.

  {Extension}         - The extension portion of the filename only.
  {Filename}          - The filename and extension, without path.
  {FilenameOnly}      - The portion of the filename without the extension.
  {FullFilename}      - The fully qualified path and filename of the current
                        file.
  {FullFoldername}    - The full path name of the current folder.
  {Index}             - The match index of the current file.
  {RelativeFolderName}  - The portion of the current folder name that is
                          offset from the starting folder name. For example,
                          if the starting folder is 'C:\Temp' and the current
                          working folder is 'C:\Temp\bin\files', the relative
                          name is 'bin\files'.
  {StartFolderName}   - The name of the starting folder.
  {Username}          - The username of the user currently logged-in.


Examples:
iterate /log:C:\Temp\IterateLog.txt "/folder:C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendev\pendev" /filemask:*.js /recurse:true "/variables:[{'VarEFExe':'C:\Users\{Username}\Documents\Visual Studio 2015\Projects\EnsureFolder\EnsureFolder\bin\Debug\EnsureFolder.exe'},{'VarCM0Exe':'C:\Users\{Username}\Documents\Visual Studio 2017\Projects\CodeMapper0\CodeMapper0\bin\Debug\CodeMapper0.exe'}]" "/commands:['^{VarEFExe}^ ^C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendoc\{RelativeFolderName}^','^{VarEFExe}^ ^C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendoc\CallSource\{RelativeFolderName}^','esprima-cli ^/input:{FullFilename}^ ^/output:C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendoc\{RelativeFolderName}\{FilenameOnly}-js.json^','^{VarCM0Exe}^ /mode:syntax /format:json ^/input:C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendoc\{RelativeFolderName}\{FilenameOnly}-js.json^ ^/output:C:\Users\{Username}\Documents\GitHub\Scaffold\Docs\Reference\pendoc\CallSource\{RelativeFolderName}\{FilenameOnly}-js.json^']" /wait</value>
    <comment>Application syntax.</comment>
  </data>
  <data name="rxVariableNames" xml:space="preserve">
    <value>(?&lt;f&gt;\{(?&lt;n&gt;[^\}]+)\})</value>
    <comment>Regular expression pattern for reading variable names from a string template.</comment>
  </data>
  <data name="CopyrightNotice" xml:space="preserve">
    <value>/*
 * ResourceMain
 * Copyright(c) 2020. Daniel Patterson, MCSD (danielanywhere)
 * This file is licensed under GNU General Public License version 3.
 * https://opensource.org/licenses/gpl-3.0.html
 * Please see the LICENSE file in this project.
 */</value>
    <comment>Copyright notice and license.</comment>
  </data>
</root>