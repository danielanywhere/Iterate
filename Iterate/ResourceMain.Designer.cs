//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iterate {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ResourceMain {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ResourceMain() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Iterate.ResourceMain", typeof(ResourceMain).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// * ResourceMain
        /// * Copyright(c) 2020. Daniel Patterson, MCSD (danielanywhere)
        /// * This file is licensed under GNU General Public License version 3.
        /// * https://opensource.org/licenses/gpl-3.0.html
        /// * Please see the LICENSE file in this project.
        /// */.
        /// </summary>
        internal static string CopyrightNotice {
            get {
                return ResourceManager.GetString("CopyrightNotice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (?&lt;r&gt;&apos;(?&lt;v&gt;[^&apos;]*)&apos;).
        /// </summary>
        internal static string rxCommands {
            get {
                return ResourceManager.GetString("rxCommands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (?&lt;f&gt;\{(?&lt;n&gt;[^\}]+)\}).
        /// </summary>
        internal static string rxVariableNames {
            get {
                return ResourceManager.GetString("rxVariableNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (?&lt;r&gt;\{\s*&apos;(?&lt;n&gt;[^&apos;]*)&apos;\s*\:\s*&apos;(?&lt;v&gt;[^&apos;]*)&apos;\s*\}).
        /// </summary>
        internal static string rxVariables {
            get {
                return ResourceManager.GetString("rxVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Iterate over files and folders, performing one or more commands on each
        ///matching item.
        ///
        ///Syntax:
        ///iterate /folder:{FolderPath} [/filemask:{FileMask}] [/recurse:{True|False}]
        ///        [/variables:[{{Var1Name}:{Var1Value}},...,{{VarNName}:{VarNValue}}]]
        ///        /commands:[{Command1},{Command2},...{Commandn}]
        ///        [/log:{LogFilename}][/wait][/?]
        ///
        ///        {FolderPath}    - Pathname of the starting folder.
        ///        {FileMask}      - Mask to match on filenames.
        ///        {LogFilename}   - Filename of the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Syntax {
            get {
                return ResourceManager.GetString("Syntax", resourceCulture);
            }
        }
    }
}
